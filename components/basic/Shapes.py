# Shapes

import maya.cmds as mc
import maya.mel as mel

def createShape(shape, size=1, ctrlName='single', lineWidth=-1):

    # conversion for backwards compatibility
    if shape=='Square':
        shape='Cube'

    if shape == 'Circle':
        
        ctrlNode = mc.circle(name=ctrlName, radius=size*0.5)[0]

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode))

    if shape == '3D Circle':
        
        ctrlNode = mc.circle(name=ctrlName, radius=size*0.5)[0]

        mc.select(['%s.cv[3]' % (ctrlNode), '%s.cv[7]' % (ctrlNode)])
        mc.move(size*0.5 * -1, z=True, relative=True)

        mc.select(['%s.cv[1]' % (ctrlNode), '%s.cv[5]' % (ctrlNode)])
        mc.move(size*0.5 * 1, z=True, relative=True)

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode))

    if shape == 'Rounded Rectangle':

        ctrlNode = mc.circle(name=ctrlName, radius=size*0.5, sections=12)[0]

        mc.rotate(90, -90, 0, '%s.cv[*]' % (ctrlNode))

        trsVal = 0.5
        edgyness = 0.85

        mc.xform('%s.cv[0]' % (ctrlNode), translation=(-1*trsVal, 0, 1*trsVal*edgyness))
        mc.xform('%s.cv[1]' % (ctrlNode), translation=(-1*trsVal, 0, 0))
        mc.xform('%s.cv[2]' % (ctrlNode), translation=(-1*trsVal, 0, -1*trsVal*edgyness))
        mc.xform('%s.cv[3]' % (ctrlNode), translation=(-1*trsVal*edgyness, 0, -1*trsVal))
        mc.xform('%s.cv[4]' % (ctrlNode), translation=(0, 0, -1*trsVal))
        mc.xform('%s.cv[5]' % (ctrlNode), translation=(1*trsVal*edgyness, 0, -1*trsVal))
        mc.xform('%s.cv[6]' % (ctrlNode), translation=(1*trsVal, 0, -1*trsVal*edgyness))
        mc.xform('%s.cv[7]' % (ctrlNode), translation=(1*trsVal, 0, 0))
        mc.xform('%s.cv[8]' % (ctrlNode), translation=(1*trsVal, 0, 1*trsVal*edgyness))
        mc.xform('%s.cv[9]' % (ctrlNode), translation=(1*trsVal*edgyness, 0, 1*trsVal))
        mc.xform('%s.cv[10]' % (ctrlNode), translation=(0, 0, 1*trsVal))
        mc.xform('%s.cv[11]' % (ctrlNode), translation=(-1*trsVal*edgyness, 0, 1*trsVal))

    if shape == 'Sphere':

        ctrlNode = mc.curve(name=ctrlName,
                                d=1,
                                p=[(1.0, 0.0, 0.0),
                                    (0.951, 0.0, -0.309),
                                    (0.809, 0.0, -0.588),
                                    (0.588, 0.0, -0.809),
                                    (0.309, 0.0, -0.951),
                                    (-0.0, 0.0, -1.0),
                                    (-0.309, 0.0, -0.951),
                                    (-0.588, 0.0, -0.809),
                                    (-0.809, 0.0, -0.588),
                                    (-0.951, 0.0, -0.309),
                                    (-1.0, 0.0, -0.0),
                                    (-0.951, 0.0, 0.309),
                                    (-0.809, 0.0, 0.588),
                                    (-0.588, 0.0, 0.809),
                                    (-0.309, 0.0, 0.951),
                                    (-0.0, 0.0, 1.0),
                                    (0.309, 0.0, 0.951),
                                    (0.588, 0.0, 0.809),
                                    (0.809, 0.0, 0.588),
                                    (0.951, 0.0, 0.309),

                                    (1.0, -0.0, 0.0),
                                    (0.951, 0.309, 0.0),
                                    (0.809, 0.588, 0.0),
                                    (0.588, 0.809, 0.0),
                                    (0.309, 0.951, 0.0),
                                    (-0.0, 1.0, 0.0),
                                    (-0.309, 0.951, 0.0),
                                    (-0.588, 0.809, 0.0),
                                    (-0.809, 0.588, 0.0),
                                    (-0.951, 0.309, 0.0),
                                    (-1.0, 0.0, 0.0),
                                    (-0.951, -0.309, 0.0),
                                    (-0.809, -0.588, 0.0),
                                    (-0.588, -0.809, 0.0),
                                    (-0.309, -0.951, 0.0),
                                    (-0.0, -1.0, 0.0),
                                    (0.309, -0.951, 0.0),
                                    (0.588, -0.809, 0.0),
                                    (0.809, -0.588, 0.0),
                                    (0.951, -0.309, 0.0),

                                    (1.0, -0.0, 0.0),
                                    (0.951, 0.309, 0.0),
                                    (0.809, 0.588, 0.0),
                                    (0.588, 0.809, 0.0),
                                    (0.309, 0.951, 0.0),

                                    (0.0, 1.0, -0.0),
                                    (0.0, 0.951, 0.309),
                                    (0.0, 0.809, 0.588),
                                    (0.0, 0.588, 0.809),
                                    (0.0, 0.309, 0.951),
                                    (0.0, -0.0, 1.0),
                                    (0.0, -0.309, 0.951),
                                    (0.0, -0.588, 0.809),
                                    (0.0, -0.809, 0.588),
                                    (0.0, -0.951, 0.309),
                                    (0.0, -1.0, 0.0),
                                    (0.0, -0.951, -0.309),
                                    (0.0, -0.809, -0.588),
                                    (0.0, -0.588, -0.809),
                                    (0.0, -0.309, -0.951),
                                    (0.0, -0.0, -1.0),
                                    (0.0, 0.309, -0.951),
                                    (0.0, 0.588, -0.809),
                                    (0.0, 0.809, -0.588),
                                    (0.0, 0.951, -0.309),
                                    (0.0, 1.0, -0.0)],
                                k=range(66))

        mc.scale(size*0.5, size*0.5, size*0.5, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Rectangle':

        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(0, -1, -1),
                               (0, -1, 1),
                               (0, 1, 1),
                               (0, 1, -1),
                               (0, -1, -1)],
                            k=range(5))

        mc.rotate(0, 0, 90, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.scale(size*0.5, size*0.5, size*0.5, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        
    if shape == 'Triangle':

        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(0, -1, -1),
                               (0, -1, 1),
                               (0, 1, 0),
                               (0, -1, -1)],
                            k=range(4))

        mc.rotate(90, 0, 90, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.move(0, 0, 0.2, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.scale(size*0.5, size*0.5, size*0.5, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Pyramid':

        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(0, 0, -1),
                               (1, 1, 1),
                               (1, -1, 1),
                               (0, 0, -1),
                               (1, -1, 1),
                               (-1, -1, 1),
                               (0, 0, -1),
                               (-1, -1, 1),
                               (-1, 1, 1),
                               (0, 0, -1),
                               (-1, 1, 1),
                               (1, 1, 1)],
                            k=range(12))

        mc.rotate(-90, 180, 0, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.move(0, 0, 0.2, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.scale(size*0.5, size*0.5, size*0.5, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Cube':
        
        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(1, 1, 1), (1, 1, -1), (1, -1, -1), (1, -1, 1), (1, 1, 1), (-1, 1, 1), (-1, -1, 1),
                               (1, -1, 1), (1, -1, -1), (-1, -1, -1), (-1, -1, 1), (-1, -1, -1), (-1, 1, -1),
                               (1, 1, -1), (-1, 1, -1), (-1, 1, 1)],
                            k=range(16))
        
        mc.scale(size*0.5, size*0.5, size*0.5, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Octagon':

        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(0, -1, -0.333),
                               (0, -0.333, -1),
                               (0, 0.333, -1),
                               (0, 1, -0.333),
                               (0, 1, 0.333),
                               (0, 0.333, 1),
                               (0, -0.333, 1),
                               (0, -1, 0.333),
                               (0, -1, -0.333)],
                            k=range(9))

        mc.rotate(0, 0, 90, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.scale(size*0.5, size*0.5, size*0.5, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Cross':

        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(0, -1, 0),
                               (0, 1, 0),
                               (0, 0, 0),
                               (-1, 0, 0),
                               (1, 0, 0),
                               (0, 0, 0),
                               (0, 0, -1),
                               (0, 0, 1),],
                            k=range(8))

        mc.scale(size*0.5, size*0.5, size*0.5, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Arrow':

        ctrlNode = mc.curve(name=ctrlName,
                             d=1,
                             p=[(0, -1, 0), (0, -1, -5), (0, -2, -5), (0, 0, -10), (0, 2, -5), (0, 1, -5), (0, 1, 0), (0, -1, 0)],
                             k=range(8))


        mc.move(0, 0, 5, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.scale(size*0.1, size*0.1, size*0.1, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.rotate(0, 180, 90, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Double Arrow':

        ctrlNode = mc.curve(name=ctrlName,
                             d=1,
                             p=[(0, -1, 0), (0, -1, -2), (0, -2, -2), (0, 0, -5), (0, 2, -2), (0, 1, -2), (0, 1, 0),
                                (0, 1, 2), (0, 2, 2), (0, 0, 5), (0, -2, 2), (0, -1, 2), (0, -1, 0)],
                             k=range(13))


        mc.scale(size*0.1, size*0.1, size*0.1, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.rotate(0, 180, 90, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Quad Arrow':

        ctrlNode = mel.eval('curve -d 1 -p -4 0 -1 -p -4 0 -2 -p -6 0 0 -p -4 0 2 -p -4 0 1 -p -2 0 1 -p -1 0 2 \
                            -p -1 0 4 -p -2 0 4 -p 0 0 6 -p 2 0 4 -p 1 0 4 -p 1 0 2 -p 2 0 1 -p 4 0 1 -p 4 0 2 \
                            -p 6 0 0 -p 4 0 -2 -p 4 0 -1 -p 2 0 -1 -p 1 0 -2 -p 1 0 -4 -p 2 0 -4 -p 0 0 -6 -p -2 0 -4 \
                            -p -1 0 -4 -p -1 0 -2 -p -2 0 -1 -p -4 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 \
                            -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28')
        ctrlNode = mc.rename(ctrlNode, ctrlName)
        
        scaleVal = 0.0833
        mc.scale(size*scaleVal, size*scaleVal, size*scaleVal, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Needle':

        ctrlNode = mc.curve(name=ctrlName,
                                d=1,
                                p=[(9, 0, 0),
                                    (1.0, 0.0, 0.0),
                                    (0.951, 0.0, -0.309),
                                    (0.809, 0.0, -0.588),
                                    (0.588, 0.0, -0.809),
                                    (0.309, 0.0, -0.951),
                                    (-0.0, 0.0, -1.0), 
                                    (-0.309, 0.0, -0.951),
                                    (-0.588, 0.0, -0.809),
                                    (-0.809, 0.0, -0.588),
                                    (-0.951, 0.0, -0.309),
                                    (-1.0, 0.0, -0.0), 
                                    (-0.951, 0.0, 0.309),
                                    (-0.809, 0.0, 0.588),
                                    (-0.588, 0.0, 0.809),
                                    (-0.309, 0.0, 0.951),
                                    (-0.0, 0.0, 1.0), 
                                    (0.309, 0.0, 0.951),
                                    (0.588, 0.0, 0.809),
                                    (0.809, 0.0, 0.588),
                                    (0.951, 0.0, 0.309),

                                    (1.0, -0.0, 0.0),
                                    ],
                                k=range(22))

        mc.move(-9, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)
        mc.rotate(90, 0, -90, '%s.cv[*]' % (ctrlNode), r=True, ws=True)

        scaleVal = size*0.0625
        mc.scale(scaleVal, scaleVal, scaleVal, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)

    if shape == 'Double Needle':

        ctrlNode = mc.curve(name=ctrlName,
                                d=1,
                                p=[(8, 0, 0),
                                    (1.0, 0.0, 0.0),
                                    (0.951, 0.0, -0.309),
                                    (0.809, 0.0, -0.588),
                                    (0.588, 0.0, -0.809),
                                    (0.309, 0.0, -0.951),
                                    (-0.0, 0.0, -1.0),
                                    (-0.309, 0.0, -0.951),
                                    (-0.588, 0.0, -0.809),
                                    (-0.809, 0.0, -0.588),
                                    (-0.951, 0.0, -0.309),
                                    (-1.0, 0.0, -0.0),
                                    (-0.951, 0.0, 0.309),
                                    (-0.809, 0.0, 0.588),
                                    (-0.588, 0.0, 0.809),
                                    (-0.309, 0.0, 0.951),
                                    (-0.0, 0.0, 1.0), 
                                    (0.309, 0.0, 0.951),
                                    (0.588, 0.0, 0.809),
                                    (0.809, 0.0, 0.588),
                                    (0.951, 0.0, 0.309),

                                    (1.0, 0.0, 0.0),
                                    (8, 0, 0),
                                    (1.0, 0.0, 0.0),
                                    (0.951, 0.0, -0.309),
                                    (0.809, 0.0, -0.588),
                                    (0.588, 0.0, -0.809),
                                    (0.309, 0.0, -0.951),
                                    (-0.0, 0.0, -1.0),
                                    (-0.309, 0.0, -0.951),
                                    (-0.588, 0.0, -0.809),
                                    (-0.809, 0.0, -0.588),
                                    (-0.951, 0.0, -0.309),
                                    (-1.0, 0.0, -0.0),
                                    (-0.951, 0.0, 0.309),
                                    (-0.809, 0.0, 0.588),
                                    (-0.588, 0.0, 0.809),
                                    (-0.309, 0.0, 0.951),
                                    (-0.0, 0.0, 1.0),
                                    (0.309, 0.0, 0.951),
                                    (0.588, 0.0, 0.809),
                                    (0.809, 0.0, 0.588),
                                    (0.951, 0.0, 0.309),

                                    (1.0, -0.0, 0.0),
                                    ],
                                k=range(44))

        mc.move(-9, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)
                                
        mc.rotate(90, 0, -90, '%s.cv[*]' % (ctrlNode), r=True, ws=True)
        mc.rotate(180, 0, 0,'%s.cv[0:22]' % (ctrlNode), r=True, ws=True)

        scaleVal = size*0.0625
        mc.scale(scaleVal, scaleVal, scaleVal, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)
    
    if shape == 'Square Needle':

        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(0, 0, -9),
                                (0, 0, -1),
                                (0, -1, -1),
                                (0, -1, 1),
                                (0, 1, 1),
                                (0, 1, -1),
                                (0, -1, -1)],
                            k=range(7))

        mc.move(0, 0, 9, '%s.cv[*]' % (ctrlNode), r=True, ws=True)
        mc.rotate(-90, 90, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)

        scaleVal = size*0.0625
        mc.scale(scaleVal, scaleVal, scaleVal, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)

    if shape == 'Pyramid Needle':

        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(0, 0, -9),
                                (0, 0, -1),
                                (1, 1, 1),
                                (1, -1, 1),
                                (0, 0, -1),
                                (1, -1, 1),
                                (-1, -1, 1),
                                (0, 0, -1),
                                (-1, -1, 1),
                                (-1, 1, 1),
                                (0, 0, -1),
                                (-1, 1, 1),
                                (1, 1, 1)],
                            k=range(13))

        mc.move(0, 0, 9, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.rotate(-90, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        scaleVal = size*0.0625
        mc.scale(scaleVal, scaleVal, scaleVal, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)

    if shape == 'Sphere Needle':

        ctrlNode = mc.curve(name=ctrlName,
                             d=1,
                             p=[(1.0, 0.0, 0.0),
                                    (0.951, 0.0, -0.309),
                                    (0.809, 0.0, -0.588),
                                    (0.588, 0.0, -0.809),
                                    (0.309, 0.0, -0.951),
                                    (-0.0, 0.0, -1.0),
                                    (-0.309, 0.0, -0.951),
                                    (-0.588, 0.0, -0.809),
                                    (-0.809, 0.0, -0.588),
                                    (-0.951, 0.0, -0.309),
                                    (-1.0, 0.0, -0.0),
                                    (-0.951, 0.0, 0.309),
                                    (-0.809, 0.0, 0.588),
                                    (-0.588, 0.0, 0.809),
                                    (-0.309, 0.0, 0.951),
                                    (-0.0, 0.0, 1.0),
                                    (0.309, 0.0, 0.951),
                                    (0.588, 0.0, 0.809),
                                    (0.809, 0.0, 0.588),
                                    (0.951, 0.0, 0.309),

                                    (1.0, -0.0, 0.0),
                                    (0.951, 0.309, 0.0),
                                    (0.809, 0.588, 0.0),
                                    (0.588, 0.809, 0.0),
                                    (0.309, 0.951, 0.0),
                                    (-0.0, 1.0, 0.0),
                                    (-0.309, 0.951, 0.0),
                                    (-0.588, 0.809, 0.0),
                                    (-0.809, 0.588, 0.0),
                                    (-0.951, 0.309, 0.0),
                                    (-1.0, 0.0, 0.0),
                                    (-0.951, -0.309, 0.0),
                                    (-0.809, -0.588, 0.0),
                                    (-0.588, -0.809, 0.0),
                                    (-0.309, -0.951, 0.0),
                                    (-0.0, -1.0, 0.0),
                                    (0.309, -0.951, 0.0),
                                    (0.588, -0.809, 0.0),
                                    (0.809, -0.588, 0.0),
                                    (0.951, -0.309, 0.0),

                                    (1.0, -0.0, 0.0),
                                    (0.951, 0.309, 0.0),
                                    (0.809, 0.588, 0.0),
                                    (0.588, 0.809, 0.0),
                                    (0.309, 0.951, 0.0),
                                    (0.0, 1.0, -0.0),
                                    (0.0, 0.951, 0.309),
                                    (0.0, 0.809, 0.588),
                                    (0.0, 0.588, 0.809),
                                    (0.0, 0.309, 0.951),
                                    (0.0, -0.0, 1.0),
                                    (0.0, -0.309, 0.951),
                                    (0.0, -0.588, 0.809),
                                    (0.0, -0.809, 0.588),
                                    (0.0, -0.951, 0.309),
                                    (0.0, -1.0, 0.0), (0, -9, 0), (0, -1, 0), 
                                    (0.0, -0.951, -0.309),
                                    (0.0, -0.809, -0.588),
                                    (0.0, -0.588, -0.809),
                                    (0.0, -0.309, -0.951),
                                    (0.0, -0.0, -1.0),
                                    (0.0, 0.309, -0.951),
                                    (0.0, 0.588, -0.809),
                                    (0.0, 0.809, -0.588),
                                    (0.0, 0.951, -0.309),
                                    (0.0, 1.0, -0.0)],
                             k=range(68))

        mc.move(0, 9, 0, '%s.cv[*]'%ctrlNode, r=True, os=True)
    
        scaleVal = size*0.0625
        mc.scale(scaleVal, scaleVal, scaleVal, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)

    if shape == 'Marker':

        ctrlNode = mc.curve(name=ctrlName,
                             d=1,
                             p=[(0, -9, 0), (0, 0, 0), (0, 0, 0), (1, 1, 0), (0, 0, 0), (-1, -1, 0), (0, 0, 0), 
                               (-1, 1, 0), (0, 0, 0), (1, -1, 0), (0, 0, 0)],
                             k=range(11))

        mc.move(0, 9, 0, '%s.cv[*]'%ctrlNode, r=True, os=True)

        scaleVal = size*0.0625
        mc.scale(scaleVal, scaleVal, scaleVal, '%s.cv[*]' % (ctrlNode), r=True, os=True)

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, ws=True)

    if shape == 'Biped Leg IK':

        ctrlNode = mc.circle(name=ctrlName, radius=size*0.5)[0]
        
        mc.select(['%s.cv[3]' % (ctrlNode), '%s.cv[7]' % (ctrlNode)])
        mc.scale(0.4, 0.4, 0.4)
        mc.select(['%s.cv[6]' % (ctrlNode), '%s.cv[5]' % (ctrlNode), '%s.cv[4]' % (ctrlNode)])
        mc.scale(0.75, 0.75, 0.75)
        mc.select(['%s.cv[1]' % (ctrlNode)])
        mc.move(0.0, 0.5*size, 0.0, r=True, os=True, wd=True)
        mc.select(['%s.cv[2]' % (ctrlNode), '%s.cv[3]' % (ctrlNode), '%s.cv[4]' % (ctrlNode)])
        mc.move(0.1*size, 0.0, 0.0, r=True, os=True, wd=True)
        mc.select(['%s.cv[0]' % (ctrlNode), '%s.cv[2]' % (ctrlNode), '%s.cv[6]' % (ctrlNode), '%s.cv[7]' % (ctrlNode)])
        mc.move(-0.1*size, 0.0, 0.0, r=True, os=True, wd=True)
        mc.select(['%s.cv[0]' % (ctrlNode), '%s.cv[2]' % (ctrlNode)])
        mc.move(0.05*size, 0.0, 0.0, r=True, os=True, wd=True)

        mc.rotate(90, 0, 0, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.scale(size*1.95, size, size*0.87, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.move(0.015, 0, -0.185, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Quadruped Leg IK':

        ctrlNode = mel.eval('curve -d 3 -p 0 0 -3.75 -p 2 0 -3.75 -p 2.5 0 -1 -p 3 0 3.5 -p 1.5 0 3.5 \
                               -p 1 0 2.5 -p 0.75 0 3.75 -p -0.75 0 3.75 -p -1 0 2.5 -p -1.5 0 3.5 -p -3 0 3.5 \
                               -p -2.5 0 -1 -p -2 0 -3.75 -p 0 0 -3.75 -k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 11 -k 11')
        ctrlNode = mc.rename(ctrlNode, ctrlName)
        
        scaleVal = 0.14
        mc.scale(size*scaleVal*1.35, size*scaleVal, size*scaleVal, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    if shape == 'Placement':

        ctrlNode = mc.curve(name=ctrlName,
                            d=1,
                            p=[(0.9953212840507213, 3.4345574373268766e-17, 0.10000000000000987),
                                (1.1567353532259474, -1.4209198115784063e-18, 0.1002240649617891),
                                (1.1899512307355533, -9.765122336209697e-18, 0.09731535328281873),
                                (1.1953231270904559, -9.382362405305637e-18, 0.10204581524974493),
                                (1.1930586077578793, -4.760554006867924e-18, 0.11441265233003917),
                                (1.192788947111966, -1.2459752958734229e-18, 0.12478504884995156),
                                (1.1929737020060076, 1.8852340282329446e-17, 0.18525139645142455),
                                (1.1914322415760499, 2.3798894351140783e-17, 0.1990752888735766),
                                (1.1947952477597912, 2.3712764977469907e-17, 0.2010586981821355),
                                (1.2253798247509873, 5.7878011153685e-18, 0.16763050913071503),
                                (1.3611440468568818, -6.956956462312057e-17, 0.03188705435921375),
                                (1.3932670655193897, -8.621931317388819e-17, 0.0033131992222774098),
                                (1.392691142811291, -8.847068403653733e-17, -0.003830264562878797),
                                (1.3606081652263518, -9.086383751753761e-17, -0.0324041197066813),
                                (1.2248519777016054, -1.0594023068956385e-16, -0.1681736038383416),
                                (1.194263598166463, -1.1028512315304459e-16, -0.2016109609123477),
                                (1.1915252254473263, -1.0851421643101919e-16, -0.19811957282508036),
                                (1.1929924999507908, -1.0429540579775089e-16, -0.1844748338251871),
                                (1.1927134882106407, -8.413427727095302e-17, -0.12412907442512683),
                                (1.1931168620099273, -8.072468511824925e-17, -0.11362319984989518),
                                (1.1953070208009229, -7.711676934252474e-17, -0.10133068811881629),
                                (1.1889000131112957, -7.446332325051253e-17, -0.0976353219794087),
                                (1.1664106349508137, -7.023060364481334e-17, -0.099919928995917),
                                (1.0451912344561964, -4.317554983227424e-17, -0.10010570153640759),
                                (1.0198956213335606, -4.7002746254643505e-17, -0.10007807078665886),
                                (1.0149458030964134, -3.634522096614251e-17, -0.10017877769932185),
                                (1.0045054130348503, -3.4432688914077715e-17, -0.09992551142755665),
                                (0.9956892976734837, -2.5233002120764923e-17, -0.10469648840274626),
                                (0.9934335955953925, -9.695177408800322e-18, -0.11503101845743847),
                                (0.9932529496075799, 2.206299195252809e-18, -0.12431314543813546),
                                (0.9894655235682236, 2.475580548838815e-17, -0.14502982211357132),
                                (0.9469280450492191, 5.9638896030952e-17, -0.3214715188624293),
                                (0.8781041432862221, 5.639245145011229e-17, -0.4786163180617163),
                                (0.7834095947290157, 5.148459689452176e-17, -0.6216632172956817),
                                (0.6655895751423545, 4.5056980133532717e-17, -0.7463611983282368),
                                (0.57040021673111, 3.9708527080220934e-17, -0.82132256411692),
                                (0.43080440481626286, 3.1691949297496244e-17, -0.9025503564030372),
                                (0.2799238277608267, 2.2848161849852552e-17, -0.9602075513652881),
                                (0.12165939258416536, 1.7542157598705956e-17, -0.9932594840613254),
                                (0.11169079894581663, 1.0812278490067655e-17, -0.9934951255017181),
                                (0.1017890425107974, 2.5047211363553077e-17, -0.9967378830081302),
                                (0.09852986548991928, 8.762982997462636e-17, -1.0064395731560778),
                                (0.10027060411322403, 5.209484466137514e-16, -1.1577359452482696),
                                (0.09974795284507035, 5.251151892573068e-16, -1.1683676105338705),
                                (0.09721639794103543, 5.29645547129223e-16, -1.1911059106091773),
                                (0.10322842542090757, 5.333327038184661e-16, -1.1951966070644533),
                                (0.11551568276236744, 5.3824594960378895e-16, -1.1930115143927702),
                                (0.17567647661629632, 5.650026337212798e-16, -1.1931926865136377),
                                (0.18643214885423187, 5.6971900609971e-16, -1.1929220102971845),
                                (0.20011155475121473, 5.754648951736993e-16, -1.1914403784424872),
                                (0.19980291123777583, 5.762853742380915e-16, -1.1957527733623436),
                                (0.16686690888777334, 5.684047239317685e-16, -1.226133485119076),
                                (0.03114042309004371, 5.38282669312933e-16, -1.3619287827550721),
                                (0.002566567712915078, 5.326695911558224e-16, -1.3937974368207926),
                                (-0.004576896132002637, 5.290043990212093e-16, -1.3915778065631448),
                                (-0.033150751513268274, 5.092699933918767e-16, -1.359849655497243),
                                (-0.16897066632627414, 4.1880790491020404e-16, -1.2240844571405285),
                                (-0.20195212725252515, 3.9741113897931306e-16, -1.1936849119316721),
                                (-0.19648242342963762, 3.9941408977509075e-16, -1.1917659927251543),
                                (-0.18340093282192485, 4.0549743849337324e-16, -1.1929999785423224),
                                (-0.12309608119383561, 4.3220945528784783e-16, -1.1926905041616132),
                                (-0.11248278560784744, 4.370361497019019e-16, -1.1932014121647745),
                                (-0.10060908204928407, 4.42702445750882e-16, -1.1949727338148914),
                                (-0.09822596849765873, 4.4204673859184024e-16, -1.1872534642076102),
                                (-0.09997599339898802, 4.3639462828716375e-16, -1.1652986721739387),
                                (-0.0999987770632615, 4.094669047489899e-16, -1.0440442071123406),
                                (-0.09925846884986667, 4.0886992068536895e-16, -1.022715330655382),
                                (-0.10011443468888157, 4.0212973219378967e-16, -1.0139126752787058),
                                (-0.10003635665988568, 4.0024004804362467e-16, -1.0033514070671474),
                                (-0.10568523091604026, 3.672644762359216e-16, -0.9952290378683557),
                                (-0.11613293090061572, 3.1144699115390354e-16, -0.9933362923076154),
                                (-0.12351077767902678, 2.858031379432069e-16, -0.9942886409825925),
                                (-0.13542184053604744, 2.2944421836191245e-16, -0.991360063950878),
                                (-0.14640982478523892, 1.865135018087422e-16, -0.9890773580027741),
                                (-0.32247477062800933, 5.9625522647001e-17, -0.946599676239187),
                                (-0.4795510663447324, 5.636818765423869e-17, -0.8776134746850588),
                                (-0.6225019586363795, 5.14505816406188e-17, -0.7827683932039952),
                                (-0.747076752633466, 4.501399410573018e-17, -0.6648133416893306),
                                (-0.8218702594202905, 3.9656700516776785e-17, -0.5694955081820291),
                                (-0.9030016121192423, 3.163654619252868e-17, -0.42985054453956206),
                                (-0.9604813492692723, 2.278602981296282e-17, -0.2789047180793387),
                                (-0.9932601180623581, 1.6830226977217776e-17, -0.12076447941811963),
                                (-0.993574883966016, 1.0380631635024034e-17, -0.11054505895029454),
                                (-0.9975450750158122, 3.040181824050392e-17, -0.1011012313681075),
                                (-1.00754872413703, 9.673911288944141e-17, -0.09854003237483402),
                                (-1.1588166761653582, 5.326153427078457e-16, -0.10024694640846742),
                                (-1.169520356348578, 5.363875633934097e-16, -0.09965113750640861),
                                (-1.1919775966354704, 5.407562865457114e-16, -0.09740067481943218),
                                (-1.1948294229720613, 5.454947181924835e-16, -0.10465148630319665),
                                (-1.193000043052813, 5.516604416197359e-16, -0.11658308439923433),
                                (-1.1930001372208368, 5.797000598238166e-16, -0.1670947338215579),
                                (-1.193211932786699, 5.850711898442264e-16, -0.17668578375120675),
                                (-1.192862990943011, 5.910692914493575e-16, -0.18763058001555938),
                                (-1.1916466225859632, 5.980372798225534e-16, -0.20066953919485322),
                                (-1.19690977227593, 5.977604326825162e-16, -0.1980655558316905),
                                (-1.226906005126547, 5.866530478923362e-16, -0.1660577771030926),
                                (-1.3627108944859039, 5.414991506486159e-16, -0.030393791438207397),
                                (-1.3939714399623124, 5.325787101080539e-16, -0.0018199361686727976),
                                (-1.390158224029428, 5.277665870766902e-16, 0.005323527648140353),
                                (-1.3590557714726588, 5.049987791877987e-16, 0.03389738308008811),
                                (-1.2233191195133035, 3.994389204551202e-16, 0.16976245847895277),
                                (-1.1932827534561115, 3.7494783139291675e-16, 0.20186713588495273),
                                (-1.1921625660538275, 3.7880584124443626e-16, 0.19446908823095166),
                                (-1.1930908091664658, 3.858638776961244e-16, 0.18212575734349323),
                                (-1.1927766589885667, 4.191961137229081e-16, 0.121954078973914),
                                (-1.1932222181811047, 4.251503892210596e-16, 0.1114060334819667),
                                (-1.1943376147077174, 4.3162514781336184e-16, 0.10018830394022643),
                                (-1.1854816537148096, 4.303506298054265e-16, 0.09894188707643942),
                                (-1.1642215354502496, 4.250441001901909e-16, 0.09999723368529045),
                                (-1.0023185554642777, 3.87352548599701e-16, 0.10033244665008599),
                                (-0.9947136401660048, 3.5192215299627803e-16, 0.10664690272336415),
                                (-0.9641317328000217, 6.035316297448143e-17, 0.2655554220513693),
                                (-0.9045802537997342, 5.769127604897613e-17, 0.42644772426019006),
                                (-0.8184575746580174, 5.333785797233951e-17, 0.5748211856331762),
                                (-0.7081166800756761, 4.740617532516679e-17, 0.7061867058991984),
                                (-0.577017462427182, 4.0084777728514286e-17, 0.8168486917379276),
                                (-0.42888913719020205, 3.1580588768585056e-17, 0.903437170501066),
                                (-0.2778871480755769, 2.2724869203948148e-17, 0.9607608249199943),
                                (-0.1197354113037028, 1.5586128099802737e-17, 0.9932155063526471),
                                (-0.10945303525069922, 1.0659793577073503e-17, 0.9937389768620757),
                                (-0.10040100509315128, 3.491729389958673e-17, 0.9983453794110446),
                                (-0.09865312923530592, 1.021374884817815e-16, 1.0086702109376735),
                                (-0.1001760296937992, 5.220368988468734e-16, 1.159944394369473),
                                (-0.09785423752464842, 5.302936671859949e-16, 1.1925799857582131),
                                (-0.10630315259240075, 5.344637040804112e-16, 1.194233595128976),
                                (-0.11777038841823319, 5.392111714572026e-16, 1.192868626391959),
                                (-0.17787610182409813, 5.659713794519836e-16, 1.1931562826532711),
                                (-0.18872867040110058, 5.70721873715928e-16, 1.1928454842148102),
                                (-0.20071754026765537, 5.758725022166145e-16, 1.1920641059996389),
                                (-0.1960158826560835, 5.751461330427635e-16, 1.1981961443697002),
                                (-0.16528990622856693, 5.680436669088023e-16, 1.227661434194544),
                                (-0.0010733046296815996, 5.320060337243884e-16, 1.39379556598172),
                                (0.006070159154700065, 5.276579099400031e-16, 1.3885002848882901),
                                (0.17051149565539653, 4.1778769333832707e-16, 1.2225714913474826),
                                (0.2013153582160577, 3.975582577848082e-16, 1.1930739380480642),
                                (0.192419668106812, 4.0139775173816605e-16, 1.1925741013792832),
                                (0.1810282594160051, 4.0657511196481387e-16, 1.1931080415722617),
                                (0.10001549362468802, 4.4262894285524083e-16, 1.193454529354732),
                                (0.09968322663607099, 4.406070977089741e-16, 1.183684414349769),
                                (0.10002232529735505, 4.021689492293194e-16, 1.0117541104645766),
                                (0.10051652036325683, 3.9709447229760106e-16, 1.0011884675985754),
                                (0.10773934217532861, 3.558608225327934e-16, 0.9943988908098094),
                                (0.2665669194440437, 6.033801827384911e-17, 0.9638290328458243),
                                (0.42739372659580827, 5.766842007602213e-17, 0.9041115739096233),
                                (0.5756721107233518, 5.3304907145599286e-17, 0.8178326360492849),
                                (0.7069184627867837, 4.7364213840834505e-17, 0.7073556574169213),
                                (0.817431651943238, 4.003466113067193e-17, 0.5761373272298158),
                                (0.9038723382956193, 3.152401595170552e-17, 0.42791766916987556),
                                (0.9638009253644735, 2.208833932763965e-17, 0.26714024585394486),
                                (0.9951418638934391, 1.199824091759325e-17, 0.09845136223889187),
                                ],
                            k=range(150))

        mc.rotate(0, 90, 0, '%s.cv[*]' % (ctrlNode), r=True, os=True)
        mc.scale(size*0.5, size*0.5, size*0.5, '%s.cv[*]' % (ctrlNode), r=True, os=True)

    mc.makeIdentity(ctrlNode, apply=True)
    mc.delete(ctrlNode, ch=True)
    
    ctrlShape = mc.listRelatives(ctrlNode, s=True)[0]

    ctrlShape = mc.rename(ctrlShape, ctrlName+'Shape')

    #mc.setAttr('%s.lineWidth'%ctrlShape, lineWidth)

    return ctrlNode, ctrlShape